type Credit {
  _id: ID!
  userId: ID!
  creditValue: Float!
  expirationDate: String!
  nextFeeExpirationDate: String
  feesNumber: Int!
  expired: Boolean!
  feeValue: Float!
  isActive: Boolean!
}

input CreateCreditInput {
  creditValue: Float!
  expirationDate: String!
  feesNumber: Int!
}

input UpdateCreditInput {
  _id: ID!
  userId: ID
  creditValue: Float
  expirationDate: String
  nextFeeExpirationDate: String
  feesNumber: Int
  expired: Boolean
  feeValue: Float
  isActive: Boolean
}

input DeleteCreditInput {
  _id: ID
}

input FilterCredit {
  _id: ID
  userId: ID
  creditValue: Float
  expirationDate: String
  nextFeeExpirationDate: String
  feesNumber: Int
  expired: Boolean
  feeValue: Float
  isActive: Boolean
}

type Query {
  credits(filter: FilterCredit): [Credit]!
}

type Mutation {
  createCredit(credit: CreateCreditInput): Credit!
  updateCredit(credit: UpdateCreditInput): Credit!
  deleteCredit(credit: DeleteCreditInput): String!
}
